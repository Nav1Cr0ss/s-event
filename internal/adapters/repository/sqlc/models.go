// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0

package repository

import (
	"database/sql/driver"
	"fmt"
	"time"
)

type EventTypeEnum string

const (
	EventTypeEnumOnline  EventTypeEnum = "online"
	EventTypeEnumOffline EventTypeEnum = "offline"
	EventTypeEnumMixed   EventTypeEnum = "mixed"
)

func (e *EventTypeEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EventTypeEnum(s)
	case string:
		*e = EventTypeEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for EventTypeEnum: %T", src)
	}
	return nil
}

type NullEventTypeEnum struct {
	EventTypeEnum EventTypeEnum
	Valid         bool // Valid is true if EventTypeEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEventTypeEnum) Scan(value interface{}) error {
	if value == nil {
		ns.EventTypeEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EventTypeEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEventTypeEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.EventTypeEnum, nil
}

func AllEventTypeEnumValues() []EventTypeEnum {
	return []EventTypeEnum{
		EventTypeEnumOnline,
		EventTypeEnumOffline,
		EventTypeEnumMixed,
	}
}

type EventVisibilityEnum string

const (
	EventVisibilityEnumMale   EventVisibilityEnum = "male"
	EventVisibilityEnumFemale EventVisibilityEnum = "female"
	EventVisibilityEnumThird  EventVisibilityEnum = "third"
)

func (e *EventVisibilityEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EventVisibilityEnum(s)
	case string:
		*e = EventVisibilityEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for EventVisibilityEnum: %T", src)
	}
	return nil
}

type NullEventVisibilityEnum struct {
	EventVisibilityEnum EventVisibilityEnum
	Valid               bool // Valid is true if EventVisibilityEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEventVisibilityEnum) Scan(value interface{}) error {
	if value == nil {
		ns.EventVisibilityEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EventVisibilityEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEventVisibilityEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.EventVisibilityEnum, nil
}

func AllEventVisibilityEnumValues() []EventVisibilityEnum {
	return []EventVisibilityEnum{
		EventVisibilityEnumMale,
		EventVisibilityEnumFemale,
		EventVisibilityEnumThird,
	}
}

type Event struct {
	ID          int32
	Author      string
	Title       string
	Description string
	Type        EventTypeEnum
	CreatedAt   time.Time
}

type EventSetting struct {
	ID              int32
	EventID         int32
	MaxParticipants int32
	MinParticipants int32
	Visibility      []EventVisibilityEnum
}
