// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: event.sql

package repository

import (
	"context"
	"time"

	"github.com/lib/pq"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO "event" (author_id, title, description, "type")
VALUES ($1, $2, $3, $4)
RETURNING "id"
`

type CreateEventParams struct {
	AuthorID    string
	Title       string
	Description string
	Type        EventTypeEnum
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createEvent,
		arg.AuthorID,
		arg.Title,
		arg.Description,
		arg.Type,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getEvent = `-- name: GetEvent :one
SELECT ev.description,
       ev.title,
       ev.author_id,
       ev.created_at,
       ev.type,
       es.max_participants,
       es.min_participants,
       es.visibility
FROM "event" as ev
         JOIN event_settings es on ev.id = es.event_id
WHERE ev.id = $1
LIMIT 1
`

type GetEventRow struct {
	Description     string
	Title           string
	AuthorID        string
	CreatedAt       time.Time
	Type            EventTypeEnum
	MaxParticipants int32
	MinParticipants int32
	Visibility      []EventVisibilityEnum
}

func (q *Queries) GetEvent(ctx context.Context, id int32) (GetEventRow, error) {
	row := q.db.QueryRowContext(ctx, getEvent, id)
	var i GetEventRow
	err := row.Scan(
		&i.Description,
		&i.Title,
		&i.AuthorID,
		&i.CreatedAt,
		&i.Type,
		&i.MaxParticipants,
		&i.MinParticipants,
		pq.Array(&i.Visibility),
	)
	return i, err
}
